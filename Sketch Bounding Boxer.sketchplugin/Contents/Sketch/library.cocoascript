//===============================================
// sketch bounding boxer  - library
//===============================================

var Library = {};
(function(self) {

  self.jsArray = jsArray;
  self.findLayers = findLayers;
  self.createAlert = createAlert;
  self.createLabel = createLabel;


  //===============================================
  function jsArray(array) {
    var length = [array count];
    var jsArray = [];

    while (length--) {
        jsArray.push([array objectAtIndex: length]);
    }
    return jsArray;
  }


  function findLayers(nameOrNames, exactMatch, type, rootLayer, subLayersOnly, layersToExclude) {

    //create predicate format
    var formatRules = ['(name != NULL)'];
    var arguments = [];

    //name
    if(Array.isArray(nameOrNames)) {
      log(nameOrNames)
      var nameArguments = [];
      var nameRules = [];
      nameOrNames.forEach(function(name) {
        if(name.indexOf('*') === -1) {
          nameRules.push('(name == %@)');
        } else {
          nameRules.push('(name like %@)');
        }
        nameArguments.push(name);
      })
      arguments = arguments.concat(nameArguments)
      formatRules.push('(' + nameRules.join(' OR ') + ')')
    } else {
      if(exactMatch) {
        formatRules.push('(name == %@)');
      } else {
        formatRules.push('(name like %@)');
      }
      arguments.push(nameOrNames);
    }

    //type
    if (type) {
      if (type === SHAPE) {
        formatRules.push('(className == "MSRectangleShape" OR className == "MSTriangleShape" OR className == "MSOvalShape" OR className == "MSStarShape" OR className == "MSPolygonShape" OR className == "MSShapeGroup")')
      }
      else {
        formatRules.push('(className == %@)')
      }
      args.push(type)
    } else {
      formatRules.push('(className == "MSLayerGroup" OR className == "MSShapeGroup" OR className == "MSArtboardGroup" OR className == "MSTextLayer" OR className == "MSRectangleShape" OR className == "MSTriangleShape" OR className == "MSOvalShape" OR className == "MSStarShape" OR className == "MSPolygonShape")')
    }

    //layers to exclude
    if (layersToExclude) {
      formatRules.push('NOT (SELF IN %@)');
      arguments.push(layersToExclude);
    }

    //prepare format string
    var formatString = formatRules.join(' AND ');

    //create predicate
    predicate = [NSPredicate predicateWithFormat: formatString argumentArray: arguments];

    //get layers to filter
    var layers;
    if (subLayersOnly) {
      layers = [[rootLayer layers] array];
    } else {
      layers = [rootLayer children];
    }

      //perform query
    var queryResult = [layers filteredArrayUsingPredicate: predicate];

      //return result as js array
    return jsArray(queryResult);
  }

  function createAlert(title, message, iconFileName) {

    var alert = [COSAlertWindow new];
    [alert setMessageText: title];
    [alert setInformativeText: message];

    if(iconFileName) {
      //get icon path
      var scriptPath = [NSString stringWithString: context.scriptPath];
      scriptPath = [scriptPath stringByDeletingLastPathComponent];
      var iconPath = [scriptPath stringByAppendingPathComponent: iconFileName];

      //set icon
      var icon = [[NSImage alloc] initByReferencingFile: iconPath];
      [alert setIcon: icon];
    }

    return alert;
  }


  function createLabel(text, fontSize, bold, frame) {

    var label = [[NSTextField alloc] initWithFrame:frame];
    [label setStringValue:text];
    if (bold) {
      [label setFont:[NSFont boldSystemFontOfSize:fontSize]];
    } else {
      [label setFont:[NSFont systemFontOfSize:fontSize]];
    }
    [label setBezeled:false];
    [label setDrawsBackground:false];
    [label setEditable:false];
    [label setSelectable:false];

    return label;
  }

})(Library);
